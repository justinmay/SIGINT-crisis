{"version":3,"sources":["components/Terminal.tsx","serviceWorker.ts","index.tsx"],"names":["Terminal","props","state","messages","client","Stitch","initializeDefaultAppClient","text","documentid","BSON","ObjectId","handleChange","bind","handleSubmit","deleteMessage","messageCollection","this","getServiceClient","RemoteMongoClient","factory","db","collection","query","findOne","then","result","console","log","message","setState","catch","err","error","loginAnonymous","update","updateOne","matchedCount","modifiedCount","updateMessages","credential","AnonymousCredential","auth","loginWithCredential","event","preventDefault","sendMessage","target","value","className","map","i","key","onClick","onSubmit","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c5e62e3.chunk.js","sourcesContent":["import React from 'react';\nimport './Terminal.css';\nimport {\n    Stitch,\n    AnonymousCredential,\n    RemoteMongoClient,\n    StitchAppClient,\n    RemoteMongoCollection,\n    BSON\n  } from \"mongodb-stitch-browser-sdk\";\n\ninterface terminalProps {\n\n}\n\ninterface message {\n    messages: string[]\n}\n\ninterface terminalState {\n    messages: string[];\n    client: StitchAppClient;\n    messageCollection?: RemoteMongoCollection<any>;\n    text: string;\n    documentid: BSON.ObjectId;\n}\n\nclass Terminal extends React.Component<terminalProps,terminalState> {\n\n    constructor(props: terminalState) {\n        super(props);\n        this.state = {\n            messages: [],\n            client: Stitch.initializeDefaultAppClient(\"sigint-stitch-xfunj\"), // Initialize the App Client\n            text: \"\",\n            documentid: new BSON.ObjectId(\"5e545ab16cc1a80fbf8f7f0d\"),\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.deleteMessage = this.deleteMessage.bind(this);\n        \n    }\n\n    componentDidMount() {\n        // Get a MongoDB Service Client\n        // This is used for logging in and communicating with Stitch\n        const mongodb = this.state.client.getServiceClient(\n          RemoteMongoClient.factory,\n          \"mongodb-atlas\"\n        );\n        const messageCollection = mongodb.db(\"sigint-messages\").collection(\"messages\");\n        const query = { \"_id\": this.state.documentid };\n        const options = {};\n        messageCollection!.findOne(query, options)\n        .then((result) => {\n            if (result) {\n            console.log(`Successfully found document: ${result}.`);\n            const messageObj: any = result;\n            const messages: string[] = messageObj.message;\n            this.setState({messages});\n            } else {\n            console.log('No document matches the provided query.');\n            }\n        })\n        .catch((err) => console.error(`Failed to find document: ${err}`));\n        // Get a reference to the todo database\n        this.setState({\n            messageCollection,\n        });\n        this.loginAnonymous();\n    }\n\n    updateMessages() {\n        const query = { \"_id\": this.state.documentid };\n        const options = {};\n        this.state.messageCollection!.findOne(query, options)\n        .then((result) => {\n            if (result) {\n            console.log(`Successfully found document: ${result}.`);\n            const messageObj: any = result;\n            const messages: string[] = messageObj.message;\n            this.setState({messages});\n            } else {\n            console.log('No document matches the provided query.');\n            }\n        })\n        .catch((err) => console.error(`Failed to find document: ${err}`));\n    }\n\n    deleteMessage(message: string) {\n        const query = { \"_id\": this.state.documentid };\n        const update = { \"$pull\": { \"message\": message} };\n        const options = { \"upsert\": false };\n        this.state.messageCollection!.updateOne(query, update, options)\n        .then(result => {\n            const { matchedCount, modifiedCount } = result;\n            if(matchedCount && modifiedCount) {\n            console.log(`Successfully deleted the item.`)\n            this.updateMessages();\n            }\n        })\n    }\n\n    sendMessage(message: string) {\n        const query = { \"_id\": this.state.documentid };\n        const update = { \"$push\": { \"message\": message } };\n        const options = { \"upsert\": false };\n        this.state.messageCollection!.updateOne(query, update, options)\n        .then(result => {\n            const { matchedCount, modifiedCount } = result;\n            if(matchedCount && modifiedCount) {\n            console.log(`Successfully updated the item.`)\n            this.updateMessages();\n            }\n        })\n        .catch(err => console.error(`Failed to update the item: ${err}`))\n        /**\n         * this.state.messageCollection!.insertOne(newMessage)\n        .then(result => console.log(`Successfully inserted item with _id: ${result.insertedId}`))\n        .catch(err => console.error(`Failed to insert item: ${err}`))\n         */\n    }\n\n    loginAnonymous() {\n        // Allow users to log in anonymously\n        const credential = new AnonymousCredential();\n        return this.state.client.auth.loginWithCredential(credential);\n    }\n\n    handleSubmit(event: any){\n        event.preventDefault();\n        this.sendMessage(this.state.text);\n        this.setState({text: \"\"});\n    }\n\n    handleChange(event: any) {\n        this.setState({text: event.target.value});\n    }\n\n\n    render() {\n        return (\n            <div className=\"main\">\n                <div className=\"messageContainer\">\n                {this.state.messages.map((message,i) => {\n                    return (\n                        <div key={i} className=\"message\">\n                            <div className=\"messageHeader\">\n                                > SIGINT-2020-1:~ CRISIS$\n                            </div>\n                            <div className=\"messageBody\">\n                                {message}\n                            </div>\n                            <button className=\"button\" onClick={() => this.deleteMessage(message)}>X</button>\n                        </div>\n                    )\n                })}\n                </div>\n\n                <form className = \"form\" onSubmit={this.handleSubmit}>\n                    <label>\n                    <input className=\"input\" type=\"text\" value={this.state.text} onChange={this.handleChange} />\n                    </label>\n                </form>\n\n            </div>\n        );\n    }\n}\n\nexport default Terminal;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Terminal from './components/Terminal';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Terminal />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}